<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="5.13.1@086b94371304750d1c673315321a55d15fc59015">
  <file src="src/Config.php">
    <InvalidFunctionCall>
      <code>$factory($container, $name, $callable)</code>
    </InvalidFunctionCall>
    <InvalidStringClass>
      <code>new $delegator()</code>
    </InvalidStringClass>
    <MissingClosureReturnType>
      <code>function (</code>
      <code>function () use ($previous, $container) {</code>
    </MissingClosureReturnType>
  </file>
  <file src="src/Tool/AutowiresConfigDumperCommand.php">
    <LessSpecificReturnStatement>
      <code><![CDATA[(object) [
            'command'    => self::COMMAND_DUMP,
            'configFile' => $configFile,
            'config'     => $config,
            'class'      => $class,
        ]]]></code>
      <code><![CDATA[(object) [
            'command' => self::COMMAND_ERROR,
            'message' => $message,
        ]]]></code>
      <code><![CDATA[(object) [
            'command' => self::COMMAND_HELP,
        ]]]></code>
    </LessSpecificReturnStatement>
    <MoreSpecificReturnType>
      <code>stdClass</code>
      <code>stdClass</code>
      <code>stdClass</code>
    </MoreSpecificReturnType>
    <PossiblyInvalidArgument>
      <code>$resource</code>
    </PossiblyInvalidArgument>
    <RedundantCondition>
      <code>false</code>
    </RedundantCondition>
  </file>
  <file src="tests/ConfigTest.php">
    <MissingClosureReturnType>
      <code>function () {</code>
      <code>function (ContainerInterface $container) {</code>
      <code>function (Service $service) {</code>
    </MissingClosureReturnType>
    <UndefinedInterfaceMethod>
      <code>getKnownEntryNames</code>
      <code>getKnownEntryNames</code>
      <code>getKnownEntryNames</code>
      <code>getKnownEntryNames</code>
      <code>getKnownEntryNames</code>
      <code>getKnownEntryNames</code>
      <code>getKnownEntryNames</code>
    </UndefinedInterfaceMethod>
  </file>
  <file src="tests/Tool/AutowiresConfigDumperCommandTest.php">
    <ImplicitToStringCast>
      <code>Argument::containingString($message)</code>
      <code><![CDATA[Argument::containingString('<info>Usage:</info>')]]></code>
    </ImplicitToStringCast>
    <PossiblyNullReference>
      <code>shouldBeCalled</code>
      <code>shouldBeCalled</code>
      <code>shouldBeCalled</code>
    </PossiblyNullReference>
    <UnresolvableInclude>
      <code>include $config</code>
    </UnresolvableInclude>
  </file>
</files>
